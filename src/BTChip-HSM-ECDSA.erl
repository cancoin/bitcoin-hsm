%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.1
%% Purpose: encoder and decoder to the types in mod BTChip-HSM-ECDSA

-module('BTChip-HSM-ECDSA').
-compile(nowarn_unused_vars).
-asn1_info([{vsn,'4.0.1'},
            {module,'BTChip-HSM-ECDSA'},
            {options,[{i,"src"},ber,der,noobj,{outdir,"src"},{i,"."},{i,"asn1"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_ECDSA-Sig-Value-Seq'/2,
'enc_ECDSA-Sig-Value-Set'/2
]).

-export([
'dec_ECDSA-Sig-Value-Seq'/2,
'dec_ECDSA-Sig-Value-Set'/2
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('ECDSA-Sig-Value-Seq',Data) -> 'enc_ECDSA-Sig-Value-Seq'(Data);
encode_disp('ECDSA-Sig-Value-Set',Data) -> 'enc_ECDSA-Sig-Value-Set'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('ECDSA-Sig-Value-Seq',Data) -> 'dec_ECDSA-Sig-Value-Seq'(Data);
decode_disp('ECDSA-Sig-Value-Set',Data) -> 'dec_ECDSA-Sig-Value-Set'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  ECDSA-Sig-Value-Seq
%%================================
'enc_ECDSA-Sig-Value-Seq'(Val) ->
    'enc_ECDSA-Sig-Value-Seq'(Val, [<<48>>]).

'enc_ECDSA-Sig-Value-Seq'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ECDSA-Sig-Value-Seq_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ECDSA-Sig-Value-Seq_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ECDSA-Sig-Value-Seq_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ECDSA-Sig-Value-Seq_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ECDSA-Sig-Value-Seq'(Tlv) ->
   'dec_ECDSA-Sig-Value-Seq'(Tlv, [16]).

'dec_ECDSA-Sig-Value-Seq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_integer(V1, [2]) || V1 <- Tlv1].




%%================================
%%  ECDSA-Sig-Value-Set
%%================================
'enc_ECDSA-Sig-Value-Set'(Val) ->
    'enc_ECDSA-Sig-Value-Set'(Val, [<<49>>]).

'enc_ECDSA-Sig-Value-Set'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ECDSA-Sig-Value-Set_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ECDSA-Sig-Value-Set_components'([], AccBytes, AccLen) -> 
   {dynamicsort_SETOF(AccBytes),AccLen};

'enc_ECDSA-Sig-Value-Set_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ECDSA-Sig-Value-Set_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ECDSA-Sig-Value-Set'(Tlv) ->
   'dec_ECDSA-Sig-Value-Set'(Tlv, [17]).

'dec_ECDSA-Sig-Value-Set'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_integer(V1, [2]) || V1 <- Tlv1].



%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

dynamicsort_SETOF(ListOfEncVal) ->
    BinL =
        lists:map(fun(L) when is_list(L) ->
                         list_to_binary(L);
                     (B) ->
                         B
                  end,
                  ListOfEncVal),
    lists:sort(BinL).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
